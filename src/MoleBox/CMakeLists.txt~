
#option(MB_LUA "Enable the use of Lua components in your application" ON)
option(LUA_EDITOR_TOOL "Enable the Lua live editor" OFF)

#
#	Set the Sources and headers and forms
#

set ( MoleBox_SOURCES

  Actions/Keyboard.cpp 
  Actions/Mouse.cpp 
  Action.cpp 
  Actions.cpp
  Lua/Content.cpp	  
  Lua/ScriptHelper.cpp
  Lua/Component.cpp
  Lua/Script.cpp
  Lua/Scripts.cpp
  Lua/Editor.cpp 
  GameComponent.cpp
  Game.cpp
  Content/Content.cpp
  )
  
  set ( MoleBox_HEADERS

  ${MB_INCLUDE_DIR}/MoleBox/Lua/Editor.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/ScriptHelper.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/Component.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/Script.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/Scripts.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/EditorFunctions.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Lua/EditorFunctions.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Content/ContentTemplate.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Content/Content.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Action.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Actions.hpp
  ${MB_INCLUDE_DIR}/MoleBox/ContainerDefinitions.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Content/Content.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Game.hpp
  ${MB_INCLUDE_DIR}/MoleBox/GameComponent.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Actions/Keyboard.hpp
  ${MB_INCLUDE_DIR}/MoleBox/Actions/Mouse.hpp

  )
  
 set( MB_LIBS ${SFML_LIBRARIES} ${OPENGL_gl_LIBRARY} ${GLU_LIBRARY} ${LUA_LIBRARY} )
 #set( MB_INC_DIR ${CMAKE_CURRENT_BINARY_DIR} ${SFML_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} ${GLU_INCLUDE_PATH} ${LUA_INCLUDE_DIR})
 set (MB_FILE_LIST ${MoleBox_HEADERS} ${MoleBox_SOURCES})
 
  if (LUA_EDITOR_TOOL)
  
	set ( MoleBox_FORMS 
	      Lua/GameLuaEditor.ui
		)
	
	#set ( paulsframework_RESOURCES )
 
	qt4_wrap_cpp( MoleBox_HEADERS_MOC ${MoleBox_HEADERS} )
	qt4_wrap_ui( MoleBox_FORMS_HEADERS ${MoleBox_FORMS} )
	# qt_add_resources( paulsframework_RESOURCES_RCC ${paulsframework_RESOURCES} )

	add_definitions( "-DLUA_EDITOR" )
	#include_directories(${CMAKE_CURRENT_BINARY_DIR})
	add_definitions(${QT_DEFINITIONS})
	#set (MB_INC_DIR ${MB_INC_DIR} )
	set (MB_LIBS ${MB_LIBS} ${QT_LIBRARIES})
	set (MB_FILE_LIST 
			${MB_FILE_LIST}
			${MoleBox_HEADERS_MOC}
			${MoleBox_FORMS_HEADERS}
			#${paulsframework_RESOURCES_RCC}
		)
  endif()
  
  if (SFML_FOUND)
  
  	add_library(MoleBox SHARED  ${MB_FILE_LIST})
	set_target_properties(MoleBox PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

	include_directories(${CMAKE_CURRENT_BINARY_DIR} ${SFML_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} ${GLU_INCLUDE_PATH} ${LUA_INCLUDE_DIR})
	target_link_libraries(MoleBox ${MB_LIBS})
	install( TARGETS MoleBox 
            RUNTIME DESTINATION bin COMPONENT bin
            LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT bin 
            ARCHIVE DESTINATION lib${LIB_SUFFIX} COMPONENT devel
            FRAMEWORK DESTINATION ${CMAKE_INSTALL_FRAMEWORK_PREFIX} COMPONENT bin)

	install (DIRECTORY "${MB_INCLUDE_DIR}/MoleBox" DESTINATION "include" )

  endif()

  add_subdirectory(Lua)
add_subdirectory(Actions)
add_subdirectory(Content)