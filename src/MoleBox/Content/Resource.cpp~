#include <MoleBox/Content/Resource.hpp>
#include <MoleBox/Content/ContentTemplate.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>



MB::Content::Resource::Resource(std::string type) : type(type)
{
  
}

MB::Content::Resource::~Resource()
{
}

std::string MB::Content::Resource::Type()
{
  return this->type;
}



// -- sprites

MB::Content::RSprite::RSprite(std::string type) : Resource(type)
{
  
}
MB::Content::RSprite::~RSprite()
{
  
}

void MB::Content::RSprite::Load(std::string file)
{
  sf::Texture texture = MB::Content::Load<sf::Texture>(file);
}

 bool MB::Content::RSprite::CheckExtension(std::string extension)
{
  std::string supportedImageTypes = "bmp dds jpg png tga psd";
  return supportedImageTypes.find(extension);  
}

MB::Content::StrVect MB::Content::RSprite::List()
{
     return MB::Content::List<sf::Texture>(); 
}

// -- sound

MB::Content::RSound::RSound(std::string type) : Resource(type)
{
  
}
MB::Content::RSound::~RSound()
{
  
}

void MB::Content::RSound::Load(std::string file)
{
  sf::SoundBuffer sound = MB::Content::Load<sf::SoundBuffer>(file);

}

 bool MB::Content::RSound::CheckExtension(std::string extension)
{
    std::string supportedAudioTypes = "ogg wav flac aiff au raw paf svx nist voc ircam w64 mat4 mat5 pvf htk sds avr sd2 caf wve mpc2k rf64";
  return supportedAudioTypes.find(extension);

}

MB::Content::StrVect MB::Content::RSound::List()
{
    return MB::Content::List<sf::SoundBuffer>();
}

// -- music


MB::Content::RMusic::RMusic(std::string type) : Resource(type)
{
  
}

MB::Content::RMusic::~RMusic()
{
  
}

void MB::Content::RMusic::Load(std::string file)
{
  sf::Music* music = MB::Content::Load<sf::Music*>(file);
}

bool MB::Content::RMusic::CheckExtension(std::string extension)
{
  std::string supportedAudioTypes = "ogg wav flac aiff au raw paf svx nist voc ircam w64 mat4 mat5 pvf htk sds avr sd2 caf wve mpc2k rf64";
  
  return supportedAudioTypes.find(extension);
  
}

MB::Content::StrVect MB::Content::RMusic::List()
{
  return MB::Content::List<sf::Music*>();
}

// -- lua scripts

MB::Content::RLuaScript::RLuaScript(std::string type) : Resource(type)
{
  
}
MB::Content::RLuaScript::~RLuaScript()
{
  
}

void MB::Content::RLuaScript::Load(std::string file)
{
  MB::Content::Load<MB::Lua::LuaScript*>(file);
}

bool MB::Content::RLuaScript::CheckExtension(std::string extension)
{
  return extension == "lua";
}

MB::Content::StrVect MB::Content::RLuaScript::List()
{
  MB::Content::List<MB::Lua::LuaScript*>();
}